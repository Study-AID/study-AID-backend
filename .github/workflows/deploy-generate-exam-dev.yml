name: Dev - Deploy Generate Exam

on:
  push:
    tags:
      - 'deploy-exam-[0-9]*.[0-9]*.[0-9]*-dev'

env:
  LAMBDA_FUNCTION_NAME: dev-generate-exam
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: ubuntu-latest
    container:
      image: public.ecr.aws/sam/build-python3.13:latest-x86_64
      # This image is based on Amazon Linux 2023 and is similar to Lambda runtime environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Container already has Python 3.13 installed, so we skip Python setup

      - name: Install system dependencies
        run: |
          # Install required system packages for PyMuPDF and other dependencies
          yum install -y gcc gcc-c++ python3-devel mupdf-devel freetype-devel zlib-devel jbig2dec-devel harfbuzz-devel openjpeg2-devel libXext-devel mesa-libGL-devel libXt-devel curl-devel
          
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="$HOME/.local/bin:$PATH"
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: Install dependencies
        working-directory: ./jobs/generate_exam
        run: |
          # Use pip directly instead of uv for better compatibility
          pip3 install --upgrade pip
          # Use --platform to match Lambda environment
          pip3 install -r requirements.txt --target ./package --platform manylinux2014_x86_64 \
            --only-binary=:all: --implementation cp --python-version 313 --abi cp313
          
          # If PyMuPDF still fails, we can install a specific compatible version or without pymupdf
          if [ $? -ne 0 ]; then
            echo "Falling back to alternative installation method"
            # Remove PyMuPDF from requirements
            grep -v pymupdf requirements.txt > temp_requirements.txt
            # Install everything else
            pip3 install -r temp_requirements.txt --target ./package
            # Try to install PyMuPDF with different options
            pip3 install pymupdf==1.23.8 --target ./package --no-deps --no-binary :all:
          fi

      - name: Prepare deployment package
        run: |
          # Create deployment directory
          mkdir -p deployment
          
          # Copy all dependencies to deployment directory
          cp -r ./jobs/generate_exam/package/* deployment/
          
          # Create directory structure in deployment
          mkdir -p deployment/jobs/generate_exam
          mkdir -p deployment/prompts
          
          # Copy Python files to maintain relative path structure
          cp ./jobs/generate_exam/*.py deployment/jobs/generate_exam/
          
          # Copy prompts directory
          cp -r ./prompts/* deployment/prompts/
          
          # Create the lambda_handler wrapper at root level
          cat > deployment/lambda_handler.py << 'EOF'
          import sys
          sys.path.insert(0, '.')
          from jobs.generate_exam.handler import handler
          
          def lambda_handler(event, context):
              return handler(event, context)
          EOF
          
          # Create deployment zip
          cd deployment
          zip -r ../deployment.zip .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://deployment.zip

      - name: Wait for Lambda update completion
        run: |
          aws lambda wait function-updated \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }}

      - name: Update Lambda configuration
        run: |
          aws lambda update-function-configuration \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --handler lambda_handler.lambda_handler \
            --environment Variables={ENV="dev"}
          
          # Wait for the configuration update to complete
          aws lambda wait function-updated \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }}

      - name: Get Lambda function info
        run: |
          aws lambda get-function \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --query 'Configuration.[FunctionArn, LastModified, Version]'
