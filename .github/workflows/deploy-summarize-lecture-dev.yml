name: Dev - Deploy dev-summarize-lecture Lambda Job

on:
  push:
    tags:
      - 'deploy-job-summarize-lecture-[0-9]+.[0-9]+.[0-9]+-dev'

env:
  LAMBDA_FUNCTION_NAME: dev-summarize-lecture
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: study-aid-lambda
  ECR_IMAGE_TAG: dev-summarize-lecture

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Create ECR repository if it doesn't exist
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
            aws ecr create-repository --repository-name $ECR_REPOSITORY
          
          # Build the docker image using the Dockerfile in the function directory
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG -f jobs/summarize_lecture/Dockerfile .
          
          # Push the docker image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG
          
          # Save the image URI
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update Lambda function
        run: |
          # Update the Lambda function to use the new container image
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri ${{ steps.build-image.outputs.image }}
          
          # Wait for the update to complete
          aws lambda wait function-updated \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }}

      - name: Get Lambda function info
        run: |
          aws lambda get-function \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --query 'Configuration.[FunctionArn, LastModified, Version]'

      - name: Get current time
        id: current-time
        run: echo "time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Extract version from deployment tag
        id: get-version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=$(echo $TAG_NAME | sed -E 's/deploy-job-summarize-lecture-([0-9]+\.[0-9]+\.[0-9]+)(-dev)?/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Notify Slack on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,repo,commit,message
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "good",
                  "title": "✅ Deployment Success: Lambda -> dev-summarize-lecture",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Version",
                      "value": "${{ steps.get-version.outputs.version }}", 
                      "short": true
                    },
                    {
                      "title": "Commit Message",
                      "value": ${{ toJSON(github.event.head_commit.message) }},
                      "short": false
                    },
                    {
                      "title": "Lambda Function",
                      "value": "${{ env.LAMBDA_FUNCTION_NAME }}",
                      "short": true
                    },
                    {
                      "title": "Image Tag",
                      "value": "${{ env.ECR_IMAGE_TAG }}",
                      "short": true
                    },
                    {
                      "title": "Actor",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Action URL",
                      "value": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "short": false
                    }
                  ],
                  "footer": "GitHub Actions",
                  "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                  "ts": "${{ steps.current-time.outputs.time }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,repo,commit,message
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "danger",
                  "title": "❌ Deployment Failed: Lambda -> dev-summarize-lecture",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Version",
                      "value": "${{ steps.get-version.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "Commit Message",
                      "value": ${{ toJSON(github.event.head_commit.message) }},
                      "short": false
                    },
                    {
                      "title": "Lambda Function",
                      "value": "${{ env.LAMBDA_FUNCTION_NAME }}",
                      "short": true
                    },
                    {
                      "title": "Image Tag", 
                      "value": "${{ env.ECR_IMAGE_TAG }}",
                      "short": true
                    },
                    {
                      "title": "Actor",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Action URL",
                      "value": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "short": false
                    }
                  ],
                  "footer": "GitHub Actions",
                  "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                  "ts": "${{ steps.current-time.outputs.time }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
