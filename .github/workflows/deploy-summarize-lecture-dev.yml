name: Dev - Deploy Summarize Lecture

on:
  push:
    tags:
      - 'deploy-summarize-[0-9]*.[0-9]*.[0-9]*-dev'

env:
  LAMBDA_FUNCTION_NAME: dev-summarize-lecture
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: study-aid-lambda
  ECR_IMAGE_TAG: dev-summarize-lecture

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create lambda Dockerfile
        run: |
          # Create a Dockerfile for the Lambda function based on existing test Dockerfile
          cat > Dockerfile << 'EOF'
          FROM python:3.11-slim
          
          # Install system dependencies
          RUN apt-get update && apt-get install -y \
              curl \
              gcc \
              g++ \
              make \
              && rm -rf /var/lib/apt/lists/*

          # Create app directory
          WORKDIR /var/task
          
          # Copy requirements file
          COPY jobs/summarize_lecture/requirements.txt /var/task/
          
          # Install Python dependencies
          RUN pip install --no-cache-dir -r /var/task/requirements.txt
          
          # Copy function code and prompts
          COPY jobs/summarize_lecture/ /var/task/jobs/summarize_lecture/
          COPY prompts/ /var/task/prompts/
          
          # Create the lambda_handler wrapper
          RUN echo 'import sys\nsys.path.insert(0, ".")\nfrom jobs.summarize_lecture.handler import handler\n\ndef lambda_handler(event, context):\n    return handler(event, context)' > /var/task/lambda_handler.py
          
          # Install Lambda runtime interface client
          RUN pip install --no-cache-dir awslambdaric
          
          # Set environment variables
          ENV PYTHONPATH=/var/task
          
          # Set the entrypoint
          ENTRYPOINT [ "/usr/local/bin/python", "-m", "awslambdaric" ]
          
          # Set the Lambda handler as CMD
          CMD [ "lambda_handler.lambda_handler" ]
          EOF

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Create ECR repository if it doesn't exist
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
            aws ecr create-repository --repository-name $ECR_REPOSITORY
          
          # Build the docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG .
          
          # Push the docker image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG
          
          # Save the image URI
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update Lambda function
        run: |
          # Update the Lambda function to use the new container image
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri ${{ steps.build-image.outputs.image }}
          
          # Wait for the update to complete
          aws lambda wait function-updated \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }}

      - name: Get Lambda function info
        run: |
          aws lambda get-function \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --query 'Configuration.[FunctionArn, LastModified, Version]'
