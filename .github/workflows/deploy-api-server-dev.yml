name: Dev - Deploy API Server to ECS

on:
  push:
    tags:
      - 'deploy-api-server-[0-9]+.[0-9]+.[0-9]+-dev'
      - 'deploy-langchain-server-[0-9]+.[0-9]+.[0-9]+-dev'
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: study_aid/backend
  ECS_CLUSTER: study_aid
  ECS_SERVICE: studyaid-dev-ecs-service
  TASK_DEFINITION_FAMILY: backend

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Determine container and build process
        id: determine-container
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          if [[ $TAG_NAME == deploy-api-server-* ]]; then
            echo "container_name=api-server" >> $GITHUB_OUTPUT
            echo "build_type=api" >> $GITHUB_OUTPUT
            VERSION=$(echo $TAG_NAME | sed -E 's/deploy-api-server-([0-9]+\.[0-9]+\.[0-9]+)-dev/\1/')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "image_tag=dev-api-server-$VERSION" >> $GITHUB_OUTPUT
          elif [[ $TAG_NAME == deploy-langchain-server-* ]]; then
            echo "container_name=langchain-server" >> $GITHUB_OUTPUT
            echo "build_type=langchain" >> $GITHUB_OUTPUT
            VERSION=$(echo $TAG_NAME | sed -E 's/deploy-langchain-server-([0-9]+\.[0-9]+\.[0-9]+)-dev/\1/')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "image_tag=dev-langchain-server-$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Unknown tag format"
            exit 1
          fi

      - name: Set up JDK 17
        if: steps.determine-container.outputs.build_type == 'api'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Gradle
        if: steps.determine-container.outputs.build_type == 'api'
        run: |
          chmod +x ./gradlew
          ./gradlew build -Pprofile=dev

      - name: Set up Python
        if: steps.determine-container.outputs.build_type == 'langchain'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag Docker image, and push it to ECR for API Server
        id: build-image-api
        if: steps.determine-container.outputs.build_type == 'api'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.determine-container.outputs.image_tag }}
        run: |
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag Docker image, and push it to ECR for Langchain Server
        id: build-image-langchain
        if: steps.determine-container.outputs.build_type == 'langchain'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.determine-container.outputs.image_tag }}
        run: |
          docker build -f langchain/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./langchain
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_FAMILY }} \
          --query taskDefinition > task-definition.json

      - name: Update container image in task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ steps.determine-container.outputs.container_name }}
          image: ${{ steps.determine-container.outputs.build_type == 'api' && steps.build-image-api.outputs.image || steps.build-image-langchain.outputs.image }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Confirm task definition actually deployed
        id: confirm-deploy
        run: |
          LATEST_REVISION=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_FAMILY }} \
            --query "taskDefinition.revision" --output text)

          DEPLOYED_REVISION=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query "services[0].deployments[?status=='PRIMARY'].taskDefinition" --output text | awk -F: '{print $NF}')

          echo "latest=$LATEST_REVISION" >> $GITHUB_OUTPUT
          echo "deployed=$DEPLOYED_REVISION" >> $GITHUB_OUTPUT

          if [ "$LATEST_REVISION" != "$DEPLOYED_REVISION" ]; then
            echo "::error title=Deployment Rollback::ECS rolled back to previous task definition"
            exit 1
          fi

      - name: Notify Slack on Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,repo,commit,message
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "good",
                  "title": "✅ Deployment Success: ${{ steps.determine-container.outputs.container_name }} -> ECS",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Version",
                      "value": "${{ steps.determine-container.outputs.version }}", 
                      "short": true
                    },
                    {
                      "title": "Commit Message",
                      "value": ${{ toJSON(github.event.head_commit.message) }},
                      "short": false
                    },
                    {
                      "title": "Image Tag",
                      "value": "${{ steps.determine-container.outputs.image_tag }}",
                      "short": true
                    },
                    {
                      "title": "Actor",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Action URL",
                      "value": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "short": false
                    }
                  ],
                  "footer": "GitHub Actions",
                  "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                  "ts": "${{ steps.current-time.outputs.time }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,repo,commit,message
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "danger",
                  "title": "❌ Deployment Failed: ${{ steps.determine-container.outputs.container_name }} -> ECS",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Version",
                      "value": "${{ steps.determine-container.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "Commit Message",
                      "value": ${{ toJSON(github.event.head_commit.message) }},
                      "short": false
                    },
                    {
                      "title": "Image Tag", 
                      "value": "${{ steps.determine-container.outputs.image_tag }}",
                      "short": true
                    },
                    {
                      "title": "Actor",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Action URL",
                      "value": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "short": false
                    }
                  ],
                  "footer": "GitHub Actions",
                  "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                  "ts": "${{ steps.current-time.outputs.time }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}