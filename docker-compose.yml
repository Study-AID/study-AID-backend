version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.local
    env_file:
      - .env
    container_name: api-server
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
      - minio
      - createbuckets
      - localstack
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: studyaid
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      LANGCHAIN_SERVER_URL: http://langchain-server:5000
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: study-aid-lecture-materials
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - ./:/app
      - gradle-cache:/root/.gradle

  langchain:
    build:
      context: ./langchain
      dockerfile: Dockerfile
    container_name: langchain-server
    ports:
      - "5000:5000"
    volumes:
      - ./langchain:/app
      - langchain-data:/app/chroma_db
      - ./hf_cache:/tmp/huggingface
    networks:
      - app-network
    restart: unless-stopped
    profiles: ["langchain"]

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: studyaid
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  flyway:
    image: flyway/flyway
    depends_on:
      - postgres
    volumes:
      - ./flyway/migrations:/flyway/migrations
      - ./flyway/flyway-local.conf:/flyway/conf/flyway.conf
    networks:
      - app-network
    profiles: ["migration"]

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - ./minio/data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  createbuckets:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/study-aid-lecture-materials --ignore-existing;
      /usr/bin/mc policy set public myminio/study-aid-lecture-materials;
      exit 0;
      "
    networks:
      - app-network

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=sqs
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_REGION=ap-northeast-2
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  gradle-cache:
  localstack-data:
  langchain-data:
